{"version":3,"sources":["index.js"],"names":["LineConcat","attr","Array","isArray","Error","saveLinesByAttr","lines","length","type","coordinates","getResult","reduce","target","geo","coords","getGeoCoords","push","geometry","doConcatenate","result","map","data","setDataStartEnd","shift","recursion","start","end","startX","startY","endX","endY","concatenated","i","resItem","concat","pop","reverse","concatenateResult","index","splice","checkX","checkY","findIndex","lineConcat","concatenate"],"mappings":";AAgIC,aAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhIKA,IAAAA,EAAAA,WACUC,SAAAA,EAAAA,GAAM,EAAA,KAAA,GACTA,KAAAA,KAAOA,EA8HnB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cA3HiB,MAAA,WACN,IAACC,MAAMC,QAAQ,KAAKF,MAAO,MAAM,IAAIG,MAAM,gBAG3C,OADCC,KAAAA,kBACqB,IAAtB,KAAKC,MAAMC,OACJ,CAAEC,KAAM,aAAcC,YAAa,KAAKH,MAAM,IAElD,KAAKI,cAoHnB,CAAA,IAAA,kBAjHqB,MAAA,WAAA,IAAA,EAAA,KACTJ,KAAAA,MAAQ,KAAKL,KAAKU,OAAO,SAACC,EAAQC,GAC7BC,IAAAA,EAAS,EAAKC,aAAaF,GAC7B,IAACC,EAAQ,OAAOF,EAEZC,OAAAA,EAAIL,MACH,IAAA,aACDI,EAAOI,KAAKF,GACZ,MACC,IAAA,kBACDF,EAAaA,GAAAA,OAAAA,EAAAA,GAAWE,EAAAA,IAKzBF,OAAAA,GACR,MAiGV,CAAA,IAAA,eA9FgBC,MAAAA,SAAAA,GAAK,IAAA,EAEPA,MADU,YAAbA,EAAIL,OAAoBK,EAAMA,EAAII,UAC/B,QAAAJ,EAAAA,SAAA,IAAA,OAAA,EAAA,EAAKJ,cA4FnB,CAAA,IAAA,YAzFe,MAAA,WAED,OADFS,KAAAA,gBACyB,IAAvB,KAAKC,OAAOZ,OACb,CAAEC,KAAM,aAAcC,YAAa,KAAKU,OAAO,GAAGL,QAClD,CACIN,KAAM,kBACNC,YAAa,KAAKU,OAAOC,IAAI,SAAA,GAAgBN,OAAbA,EAAAA,YAmFjD,CAAA,IAAA,gBA/EmB,MAAA,WACPO,KAAAA,KAAO,KAAKf,MAAMc,IAAI,KAAKE,iBAC3BH,KAAAA,OAAS,CAAC,KAAKE,KAAKE,SACpBC,KAAAA,cA4EZ,CAAA,IAAA,kBAzEmBV,MAAAA,SAAAA,GACNW,IAAAA,EAAQX,EAAO,GACfY,EAAMZ,EAAOA,EAAOP,OAAS,GACVkB,EAAAA,EAAAA,EAHL,GAGbE,EAHa,EAAA,GAGLC,EAHK,EAAA,GAICF,EAAAA,EAAAA,EAJD,GAKb,MAAA,CAAEZ,OAAAA,EAAQa,OAAAA,EAAQC,OAAAA,EAAQC,KALb,EAAA,GAKmBC,KALnB,EAAA,MAyE3B,CAAA,IAAA,YAjEe,MAAA,WACJ,GAAqB,IAArB,KAAKT,KAAKd,OAAV,CAGC,IAFwC,IAAA,EAAA,KAAKc,KAAK,GAAjDP,EAAAA,EAAAA,OAAQa,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAChCC,GAAe,EACVC,EAAI,EAAGA,EAAI,KAAKb,OAAOZ,OAAQyB,IAAK,CACrCC,IAAAA,EAAU,KAAKd,OAAOa,GAmBtBD,GAlBAE,EAAQJ,OAASF,GAAUM,EAAQH,OAASF,GAC5CG,GAAe,EACfjB,EAAOS,QACPT,EAASmB,EAAQnB,OAAOoB,OAAOpB,IACxBmB,EAAQN,SAAWE,GAAQI,EAAQL,SAAWE,GACrDC,GAAe,EACfjB,EAAOqB,MACPrB,EAASA,EAAOoB,OAAOD,EAAQnB,QAAQsB,WAChCH,EAAQN,SAAWA,GAAUM,EAAQL,SAAWA,GACvDG,GAAe,EACfjB,EAAOsB,UAAUD,MACjBrB,EAASA,EAAOoB,OAAOD,EAAQnB,QAAQsB,WAChCH,EAAQJ,OAASA,GAAQI,EAAQH,OAASA,IACjDC,GAAe,EACfjB,EAAOsB,UAAUb,QACjBT,EAASmB,EAAQnB,OAAOoB,OAAOpB,IAG/BiB,EAAc,CACU,IADV,EAAA,EACU,KAAKM,kBAAkBvB,GADjC,GACPK,EADO,EAAA,GACCmB,EADD,EAAA,GAEdxB,EAASK,EACJA,KAAAA,OAAOa,GAAK,KAAKV,gBAAgBR,GAClCwB,GAAS,GAAG,KAAKnB,OAAOoB,OAAOD,EAAO,GAC1C,OAGHP,GAAc,KAAKZ,OAAOH,KAAK,KAAKK,KAAK,IACzCA,KAAAA,KAAKE,QACLC,KAAAA,eA+BZ,CAAA,IAAA,oBA5BqBV,MAAAA,SAAAA,GACWA,IAAAA,EAAAA,EAAAA,EAAOA,EAAOP,OAAS,GAD1B,GACfiC,EADe,EAAA,GACPC,EADO,EAAA,GAGlBH,EAAQ,KAAKnB,OAAOuB,UACpB,SAAA,GAAGf,IAAAA,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,OAAaD,OAAAA,IAAWa,GAAUZ,IAAWa,IAExDH,GAAAA,GAAS,EAAG,CACR1B,IAAAA,EAAS,KAAKO,OAAOmB,GAGlB,OAFPxB,EAAOqB,MAEA,CADPrB,EAASA,EAAOoB,OAAOtB,EAAOE,QACdwB,GAMhBA,IAHJA,EAAQ,KAAKnB,OAAOuB,UAChB,SAAA,GAAGb,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAAWD,OAAAA,IAASW,GAAUV,IAASW,MAEvC,EAAG,CACR7B,IAAAA,EAAS,KAAKO,OAAOmB,GACzBxB,EAAOsB,UAAUb,QACjBT,EAASF,EAAOE,OAAOoB,OAAOpB,GAE3B,MAAA,CAACA,EAAQwB,OAOvB,EAhIKtC,GA6HS,EAAA,SAACC,GAEL0C,OADY,IAAI3C,EAAWC,GAChB2C,eACrB,QAAA,QAAA","file":"index.js","sourceRoot":"..","sourcesContent":["class LineConcat {\n    constructor(attr) {\n        this.attr = attr\n    }\n\n    concatenate() {\n        if (!Array.isArray(this.attr)) throw new Error('Not An Array')\n\n        this.saveLinesByAttr()\n        if (this.lines.length === 1)\n            return { type: 'LineString', coordinates: this.lines[0] }\n\n        return this.getResult()\n    }\n\n    saveLinesByAttr() {\n        this.lines = this.attr.reduce((target, geo) => {\n            const coords = this.getGeoCoords(geo)\n            if (!coords) return target\n\n            switch (geo.type) {\n                case 'LineString':\n                    target.push(coords)\n                    break\n                case 'MultiLineString':\n                    target = [...target, ...coords]\n                    break\n                default:\n                    break\n            }\n            return target\n        }, [])\n    }\n\n    getGeoCoords(geo) {\n        if (geo.type === 'Feature') geo = geo.geometry\n        return geo?.coordinates\n    }\n\n    getResult() {\n        this.doConcatenate()\n        return this.result.length === 1\n            ? { type: 'LineString', coordinates: this.result[0].coords }\n            : {\n                  type: 'MultiLineString',\n                  coordinates: this.result.map(({ coords }) => coords),\n              }\n    }\n\n    doConcatenate() {\n        this.data = this.lines.map(this.setDataStartEnd)\n        this.result = [this.data.shift()]\n        this.recursion()\n    }\n\n    setDataStartEnd(coords) {\n        const start = coords[0]\n        const end = coords[coords.length - 1]\n        const [startX, startY] = start\n        const [endX, endY] = end\n        return { coords, startX, startY, endX, endY }\n    }\n\n    recursion() {\n        if (this.data.length === 0) return\n        let { coords, startX, startY, endX, endY } = this.data[0]\n        let concatenated = false\n        for (let i = 0; i < this.result.length; i++) {\n            let resItem = this.result[i]\n            if (resItem.endX === startX && resItem.endY === startY) {\n                concatenated = true\n                coords.shift()\n                coords = resItem.coords.concat(coords)\n            } else if (resItem.startX === endX && resItem.startY === endY) {\n                concatenated = true\n                coords.pop()\n                coords = coords.concat(resItem.coords).reverse()\n            } else if (resItem.startX === startX && resItem.startY === startY) {\n                concatenated = true\n                coords.reverse().pop()\n                coords = coords.concat(resItem.coords).reverse()\n            } else if (resItem.endX === endX && resItem.endY === endY) {\n                concatenated = true\n                coords.reverse().shift()\n                coords = resItem.coords.concat(coords)\n            }\n\n            if (concatenated) {\n                const [result, index] = this.concatenateResult(coords)\n                coords = result\n                this.result[i] = this.setDataStartEnd(coords)\n                if (index >= 0) this.result.splice(index, 1)\n                break\n            }\n        }\n        if (!concatenated) this.result.push(this.data[0])\n        this.data.shift()\n        this.recursion()\n    }\n\n    concatenateResult(coords) {\n        const [checkX, checkY] = coords[coords.length - 1]\n\n        let index = this.result.findIndex(\n            ({ startX, startY }) => startX === checkX && startY === checkY\n        )\n        if (index >= 0) {\n            let target = this.result[index]\n            coords.pop()\n            coords = coords.concat(target.coords)\n            return [coords, index]\n        }\n\n        index = this.result.findIndex(\n            ({ endX, endY }) => endX === checkX && endY === checkY\n        )\n        if (index >= 0) {\n            let target = this.result[index]\n            coords.reverse().shift()\n            coords = target.coords.concat(coords)\n        }\n        return [coords, index]\n    }\n}\n\nexport default (attr) => {\n    const lineConcat = new LineConcat(attr)\n    return lineConcat.concatenate()\n}\n"]}